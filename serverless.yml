# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: 64eyes
# "service" is the name of this project. This will also be added to your AWS resource names.
service: motivational-quotes-api

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - s3:GetObject
        - s3:ListBucket
      Resource: "*"

resources:
  Resources:
    MotivationalQuotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MotivationalQuotes
        AttributeDefinitions:
          - AttributeName: quote_id
            AttributeType: S
        KeySchema:
          - AttributeName: quote_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    FavoritesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FavoritesTable
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: quote_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: quote_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    HistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HistoryTable
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - arn:aws:cognito-idp:REGION:ACCOUNT_ID:userpool/USER_POOL_ID

functions:
  getQuotes:
    handler: handler.get_motivational_quotes
    events:
      - http:
          path: quotes
          method: get

  getQuotesByYear:
    handler: handler.get_motivational_quotes_by_year
    events:
      - http:
          path: quotes/{year}
          method: get

  generateQuoteExplanation:
    handler: handler.generate_quote_explanation
    events:
      - http:
          path: quotes/explanation
          method: post
  searchQuotes:
    handler: handler.search_quotes
    events:
      - http:
          path: quotes/search
          method: get
          request:
            parameters:
              querystrings:
                keyword: true

  filterQuotesByCategory:
    handler: handler.filter_quotes_by_category
    events:
      - http:
          path: quotes/filter
          method: get
          request:
            parameters:
              querystrings:
                category: true
  filterQuotesByAuthor:
    handler: handler.filter_quotes_by_author
    events:
      - http:
          path: quotes/author
          method: get
          request:
            parameters:
              querystrings:
                author: true

  filterQuotesByYear:
    handler: handler.filter_quotes_by_year
    events:
      - http:
          path: quotes/year
          method: get
          request:
            parameters:
              querystrings:
                year: true

  addQuote:
    handler: handler.add_quote
    events:
      - http:
          path: quotes
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  semanticSearch:
    handler: handler.semantic_search
    events:
      - http:
          path: quotes/search
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  personalizedRecommendations:
    handler: handler.personalized_recommendations
    events:
      - http:
          path: quotes/recommend
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  batchUploadQuotes:
    handler: handler.batch_upload_quotes
    events:
      - http:
          path: quotes/batch
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  favoriteQuote:
    handler: handler.favorite_quote
    events:
      - http:
          path: quotes/{id}/favorite
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  unfavoriteQuote:
    handler: handler.unfavorite_quote
    events:
      - http:
          path: quotes/{id}/favorite
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getFavorites:
    handler: handler.get_favorites
    events:
      - http:
          path: user/favorites
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addToHistory:
    handler: handler.add_to_history
    events:
      - http:
          path: quotes/{id}/viewed
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getHistory:
    handler: handler.get_history
    events:
      - http:
          path: user/history
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

plugins:
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - venv/**
